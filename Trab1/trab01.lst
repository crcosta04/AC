P16 assembler v1.4.0 (Mar  6 2023)	.\trab01.lst	Thu Mar 23 14:54:22 2023

Sections
Index   Name            Address   Size
0       .startup        0000      0012 18
1       .text           0012      011E 286
2       .data           0130      0015 21
3       .bss            0146      0001 1
4       .stack          0148      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      .startup
char2nat                LABEL     00F2 242    .text
char2nat_addr           LABEL     006C 108    .text
char2nat_end            LABEL     012C 300    .text
error                   LABEL     0146 326    .bss
error_addr              LABEL     0070 112    .text
error_op                LABEL     0056 86     .text
for_else                LABEL     00B4 180    .text
for_increment           LABEL     00CC 204    .text
for_loop                LABEL     0084 132    .text
line#25                 LABEL     0002 2      .startup
line#32                 LABEL     000C 12     .startup
main                    LABEL     0012 18     .text
main_addr               LABEL     0010 16     .startup
multiply                LABEL     00E0 224    .text
NAN                     ABSOLUTE  FFFF 65535  .startup
number_nan              LABEL     0120 288    .text
radix_if1               LABEL     011A 282    .text
radix_if2               LABEL     0126 294    .text
STACK_SIZE              ABSOLUTE  0040 64     .startup
str2nat                 LABEL     0072 114    .text
str2nat_addr            LABEL     006E 110    .text
str2nat_end             LABEL     00D0 208    .text
symbol_else_if          LABEL     0108 264    .text
tos                     LABEL     0188 392    .stack
tos_addr                LABEL     000E 14     .startup
tst_results             LABEL     0130 304    .data
tst_results_addr        LABEL     006A 106    .text
tst_str0                LABEL     0136 310    .data
tst_str0_addr           LABEL     0064 100    .text
tst_str1                LABEL     013C 316    .data
tst_str1_addr           LABEL     0066 102    .text
tst_str2                LABEL     0140 320    .data
tst_str2_addr           LABEL     0068 104    .text
while                   LABEL     00E2 226    .text
while_end               LABEL     00EE 238    .text

Code listing
   1           	; r0 = multiplicando
   2           	; r1 = multiplicador
   3           	
   4           	;1) a) Esta implementação ocupa 8 bytes de memória, devido ao uso de 4 registos(R0..R3), sendo cada um de 2 bytes tendo em conta as caracteristicas do processor P16.
   5           	;b) Enquanto grupo não concordamos com esta afirmação.
   6           	;Como sabemos os registos em rotinas encontram-se divididos em 3 classes,
   7           	;achamos que não seria preferivel a utilização do R4, pois ao contrário do R2,
   8           	 ;este registo tem necessidade de armazenar o seu valor, 
   9           	 ;tendo em conta o propósito da rotina multiply não faria sentido 
  10           	 ;guardar o valor sendo que o que nos importa é o valor final.
  11           	
  12           	;2) a) O valor da constante NAN é FFFF=65535, porque em hexadecimal cada valor 
  13           	;pode ser compreendido entre 0 e 15, onde 15=F. Neste caso o valor é positivo
  14           	;por ser do tipo uint16_t, ou seja, um intiero sem sinal de 16 bits.
  15           	
  16           	;b) .equ NAN, FFFF ocupa 16 bits, ou seja, 1 registo.
  17           	
  18           	;2 c)
  19           	
  20          	.equ NAN, 0xFFFF
  21          	.equ STACK_SIZE, 64
  22           	
  23           	.section .startup
  24 0000 01 58	    b _start
  25 0002 FF 5B	    b .
  26           	
  27           	_start:
  28 0004 4D 0C	    ldr sp, tos_addr ; por no sp o address do top of
  29 0006 80 B7	    mov r0, pc
  30 0008 0E A2	    add lr, r0, #4
  31 000A 2F 0C	    ldr pc, main_addr
  32 000C FF 5B	    b .
  33           	
  34           	tos_addr:
  35 000E 88 01	    .word tos
  36           	
  37           	main_addr:
  38 0010 12 00	    .word main
  39           	
  40           	.text
  41           	
  42           	main:
  43 0012 0E 24	    push lr
  44 0014 D5 0E	    ldr r5, error_addr
  45 0016 00 60	    mov r0, #0
  46 0018 50 28	    strb r0, [r5, #0]
  47 001A 40 0E	    ldr r0, tst_str0_addr
  48 001C 21 60	    mov r1, #2
  49 001E 29 5C	    bl str2nat
  50 0020 44 0E	    ldr r4, tst_results_addr
  51 0022 41 00	    ldr r1, [r4, #0]
  52 0024 12 60	    mov r2, #1
  53 0026 86 B7	    mov r6, pc
  54 0028 63 A3	    add r3, r6, #6
  55 002A 80 B8	    cmp r0, r1
  56 002C 14 44	    bne error_op
  57 002E B0 0D	    ldr r0, tst_str1_addr
  58 0030 81 60	    mov r1, #8
  59 0032 1F 5C	    bl str2nat
  60 0034 C1 00	    ldr r1, [r4, #2]
  61 0036 22 60	    mov r2, #2
  62 0038 86 B7	    mov r6, pc
  63 003A 63 A3	    add r3, r6, #6
  64 003C 80 B8	    cmp r0, r1
  65 003E 0B 44	    bne error_op
  66 0040 30 0D	    ldr r0, tst_str2_addr
  67 0042 01 61	    mov r1, #16
  68 0044 16 5C	    bl str2nat
  69 0046 41 01	    ldr r1, [r4, #4]
  70 0048 42 60	    mov r2, #4
  71 004A 86 B7	    mov r6, pc
  72 004C 63 A3	    add r3, r6, #6
  73 004E 80 B8	    cmp r0, r1
  74 0050 02 44	    bne error_op
  75 0052 50 08	    ldrb r0, [r5, #0]
  76 0054 0F 04	    pop pc
  77           	
  78           	error_op:
  79 0056 03 24	    push r3 
  80 0058 B0 0C	    ldr r0, error_addr
  81 005A 01 08	    ldrb r1, [r0, #0]
  82 005C 11 C9	    orr r1, r1, r2
  83 005E 01 28	    strb r1, [r0, #0]
  84 0060 0E 04	    pop lr
  85 0062 0F B7	    mov pc, lr
  86           	
  87           	tst_str0_addr:
  88 0064 36 01	    .word tst_str0
  89           	
  90           	tst_str1_addr:
  91 0066 3C 01	    .word tst_str1
  92           	
  93           	tst_str2_addr:
  94 0068 40 01	    .word tst_str2
  95           	
  96           	tst_results_addr:
  97 006A 30 01	    .word tst_results
  98           	
  99           	char2nat_addr:
 100 006C F2 00	    .word char2nat
 101           	
 102           	str2nat_addr:
 103 006E 72 00	    .word str2nat
 104           	
 105           	error_addr:
 106 0070 46 01	    .word error
 107           	
 108           	;r0 = &numeral[] , r1 = radix , r2 = number, r3 = error
 109           	;r4 = idx , r5 = tmp , r6 = numeral[idx] r7 = temporario
 110           	
 111           	str2nat:
 112 0072 0E 24	    push lr
 113 0074 04 24	    push r4 ; guardar os valores de r4, r5, r6 e r7 para nao serem perdidos
 114 0076 05 24	    push r5
 115 0078 06 24	    push r6
 116 007A 07 24	    push r7
 117 007C 08 24	    push r8
 118 007E 02 60	    mov r2, #0 ; number = 0 
 119 0080 03 60	    mov r3, #0 ; error = 0
 120 0082 04 60	    mov r4, #0 ; idx = 0
 121           	
 122           	for_loop:
 123 0084 06 1A	    ldrb r6, [r0, r4] ; load numeral[idx]
 124 0086 07 60	    mov r7, #0
 125 0088 B0 BB	    cmp r3, r7 ; if (error != 0) -> str2nat_end
 126 008A 22 44	    bne str2nat_end
 127 008C 07 60	    mov r7, #'\0'
 128 008E E0 BB	    cmp r6, r7  ; if (numeral[idx] == '\0') -> str2nat_end
 129 0090 1F 40	    beq str2nat_end
 130 0092 07 B0	    mov r7, r0 ; guardar o valor &numerical[]
 131 0094 00 B3	    mov r0, r6 ; por o parametro a passar a char2nat na posicao certa
 132 0096 86 B1	    mov r6, r3
 133 0098 08 B1	    mov r8, r2
 134 009A 2B 5C	    bl char2nat
 135 009C 02 B4	    mov r2, r8
 136 009E 03 B3	    mov r3, r6
 137 00A0 05 B0	    mov r5, r0 ; tmp = char2nat(numeral[idx], radix)
 138 00A2 80 B3	    mov r0, r7 ; restaurar &numerical[] para o sitio certo
 139 00A4 F7 6F	    mov r7, #NAN & 0xFF
 140 00A6 F7 7F	    movt r7, #NAN & 0xFF
 141 00A8 D0 BB	    cmp r5, r7      ; if (tmp != NAN) -> for_else
 142 00AA 04 44	    bne for_else
 143 00AC F2 6F	    mov r2, #NAN & 0xFF
 144 00AE F2 7F	    movt r2, #NAN & 0xFF
 145 00B0 13 60	    mov r3, #1 
 146 00B2 0C 58	    b for_increment
 147           	
 148           	for_else:
 149 00B4 86 B0	    mov r6, r1
 150 00B6 07 B0	    mov r7, r0
 151 00B8 88 B1	    mov r8, r3
 152 00BA 00 B1	    mov r0, r2
 153 00BC 11 5C	    bl multiply
 154 00BE 02 B0	    mov r2, r0
 155 00C0 01 B3	    mov r1, r6
 156 00C2 80 B3	    mov r0, r7
 157 00C4 03 B4	    mov r3, r8
 158 00C6 A2 82	    add r2, r2, r5
 159 00C8 80 B3	    mov r0, r7
 160 00CA 00 58	    b for_increment
 161           	
 162           	for_increment:
 163 00CC C4 A0	    add r4, r4, #1
 164 00CE DA 5B	    b for_loop
 165           	
 166           	str2nat_end:
 167 00D0 08 04	    pop r8
 168 00D2 07 04	    pop r7
 169 00D4 06 04	    pop r6
 170 00D6 05 04	    pop r5
 171 00D8 04 04	    pop r4
 172 00DA 00 B1	    mov r0, r2
 173 00DC 0E 04	    pop lr
 174 00DE 0F B7	    mov pc, lr
 175           	
 176           	multiply: 
 177 00E0 02 60	    mov r2, #0
 178           	
 179           	while:
 180 00E2 03 60	    mov r3, #0
 181 00E4 B0 B8	    cmp r3, r1
 182 00E6 03 4C	    bhs while_end
 183 00E8 22 80	    add r2, r2, r0
 184 00EA 91 A8	    sub r1, r1, #1
 185 00EC FA 5B	    b while
 186           	
 187           	while_end:
 188 00EE 00 B1	    mov r0, r2
 189 00F0 0F B7	    mov pc, lr
 190           	
 191           	char2nat:
 192 00F2 F2 6F	    mov r2, #NAN & 0xFF; number = NAN
 193 00F4 F2 7F	    movt r2, #NAN & 0xFF
 194 00F6 03 63	    mov r3, #'0'
 195 00F8 80 B9	    cmp r0, r3 
 196 00FA 06 48	    blo symbol_else_if ; if(symbol < '0') -> symbol_else_if
 197 00FC 93 63	    mov r3, #'9'
 198 00FE 30 B8	    cmp r3, r0
 199 0100 03 48	    blo symbol_else_if ; if(symbol > '9') -> symbol_else_if
 200 0102 03 63	    mov r3, #'0'
 201 0104 82 89	    sub r2, r0, r3 ; number = symbol - '0'
 202 0106 09 58	    b radix_if1
 203           	
 204           	symbol_else_if:
 205 0108 13 64	    mov r3, #'A'
 206 010A 80 B9	    cmp r0, r3
 207 010C 06 48	    blo radix_if1    ; if(symbol < 'A') -> radix_if
 208 010E 63 64	    mov r3, #'F'
 209 0110 30 B8	    cmp r3, r0
 210 0112 03 48	    blo radix_if1    ; if( symbol > 'F') -> radix_if
 211 0114 13 64	    mov r3, #'A'
 212 0116 82 89	    sub r2, r0, r3 ; number = symbol - 'A'
 213 0118 22 A5	    add r2, r2, #10 ; number = number + 10
 214           	
 215           	radix_if1:
 216 011A 03 61	    mov r3, #16
 217 011C B0 B8	    cmp r3, r1
 218 011E 03 4C	    bhs radix_if2 ; if(radix <= 16) -> char2nat_end    
 219           	
 220           	number_nan:
 221 0120 F2 6F	    mov r2, #NAN & 0xFF
 222 0122 F2 7F	    movt r2, #NAN & 0xFF
 223 0124 03 58	    b char2nat_end
 224           	
 225           	radix_if2:
 226 0126 A0 B8	    cmp r2, r1
 227 0128 01 48	    blo char2nat_end ; if(number < radix) -> char2nat_end
 228 012A FA 5B	    b number_nan
 229           	
 230           	char2nat_end:
 231 012C 00 B1	    mov r0, r2
 232 012E 0F B7	    mov pc, lr
 233           	
 234           	.data
 235           	
 236           	tst_results:
 237          	    .word 11, 457, 39439
 237 0130 0B 00 C9 01 0F 9A
 238           	
 239           	tst_str0:
 240          	    .asciz "01011"
 240 0136 30 31 30 31 31 00
 241          	    .align
 242           	
 243           	tst_str1:
 244          	    .asciz "709"
 244 013C 37 30 39 00
 245          	    .align
 246           	    
 247           	tst_str2:
 248          	    .asciz "9A0F"
 248 0140 39 41 30 46 00
 249           	
 250           	.section .bss
 251           	
 252           	error:
 253 0146 00   	    .space 1
 254           	
 255           	.section .stack
 256 0148 00   	.space STACK_SIZE
 256 .... ..
 256 0187 00
 257           	tos:
